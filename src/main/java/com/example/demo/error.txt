异常处理自动配置原理
ErrorMvcAutoConfiguration自动配置异常处理规则

容器中的组件:类型: DefaultErrorAttributes-->id: errorAttributes
   public class DefaultErrorAttributes implements ErrorAttributes, HandlerExceptionResolver
    定义错误页面中，能包含哪些属性
   容器中的组件: 类型:BasicErrorController-->id: basicErrorController(json+白页)
   默认处理/error路径的请求;页面响应new ModelAndView("error", model);
   容器中有组件view->id是error;(响应默认错误页)
   容器中放组件 BeanNameViewResolver(视图解析器);按照返回的视图名，作为组件的id去容器中找view对象
   容器中的组件DefaultErrorViewResolver
    如果发生错误，会以http状态码作为视图页地址找到真正的页面
    error/404,5xx.html
如果想要返回页面，就会找error视图。[StaticView](默认是一个白页)


异常处理步骤流程
1.执行目标方法，目标方法运行期间有任何异常都会被catch而且标志当前请求结束  并且用dispatchException封装
2.进入视图解析流程(页面渲染)processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);
3.mv=processHandlerException处理handler发生的异常,处理完成返回ModelAndView
   1.遍历所有的handlerExceptionResolvers,看谁能处理当前异常[遍历所有的handlerExceptionResolver]
   2.系统默认的异常解析器
     1.DefaultErrorAttributes先来处理异常,把异常信息保存到request域，并且返回null
     2.默认没有任何人能处理异常，所以异常会被抛出
     3.如果没有任何人能处理，底层就会发送/error请求 会被底层的BasicErrorController处理
     4.解析错误视图遍历所有的ErrorViewResolver
     5.默认的DefaultErrorViewResolver，作用就是把响应状态码作为错误页的地址拼接成error/500.html
     6.模板引擎最终响应这个页面

4.定制错误处理逻辑
   自定义错误页
     error/404.html   error/5xx.html;有精确的错误状态码页面就精确匹配，没有就找4xx.html;如果都没有就触发白页
     @ControllerAdvice+@ExceptionHandler处理全局异常;底层是ExceptionHandlerExceptionResolver支持的
     @ResponseStatus+自定义异常;底层是ResponseStatusExceptionResolver,把responseStatus注解的信息组装成ModelAndView返回;底层调用response.sendError(statusCode,resolveReason);
     tomcat发送的/error
     Spring底层的异常,如 参数类型转换异常   DefaultHandlerExceptionResolver  处理框架底层的异常
     response.sendError(HttpServletResponse.SC_BAD_REQUEST, ex.getMessage());
     自定义实现 HandlerExceptionResolver 处理异常
     ErrorViewResolver 实现自定义处理异常


